Index: src/main/resources/coremods/block_void_miner_prevent_drops.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function initializeCoreMod(){\r\n    Java.type(\"net.minecraftforge.coremod.api.ASMAPI\").loadFile(\"coremods/utils/bootstrap.js\");\r\n\r\n    var spawnDropsName = \"func_220054_a\";\r\n    var spawnDropsDesc = \"(Lnet/minecraft/block/BlockState;Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;Lnet/minecraft/entity/Entity;Lnet/minecraft/item/ItemStack;)V\";\r\n\r\n    return {\r\n        \"HEE_VoidMinerPreventDrops\": methodTransformer(\"net.minecraft.block.Block\", spawnDropsName, spawnDropsDesc, function(method, instructions){\r\n            var start = instructions.get(0);\r\n\r\n            instructions.insertBefore(start, makeInstructions(function(node){\r\n                node.visitVarInsn(op.ALOAD, 0);\r\n                node.visitVarInsn(op.ALOAD, 1);\r\n                node.visitVarInsn(op.ALOAD, 2);\r\n                node.visitVarInsn(op.ALOAD, 5);\r\n                node.visitMethodInsn(op.INVOKESTATIC, \"chylex/hee/game/block/util/IBlockHarvestDropsOverride\", \"checkHarvest\", \"(Lnet/minecraft/block/BlockState;Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/item/ItemStack;)Z\");\r\n                node.visitJumpInsn(op.IFEQ, getSkipInst(start));\r\n                node.visitInsn(op.RETURN);\r\n            }));\r\n\r\n            printInstructions(instructions);\r\n            return method;\r\n        })\r\n    };\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/coremods/block_void_miner_prevent_drops.js	(revision 12f63e69e7cf514a5fbb3c60d3bf901456ec246c)
+++ src/main/resources/coremods/block_void_miner_prevent_drops.js	(date 1581062693198)
@@ -18,7 +18,6 @@
                 node.visitInsn(op.RETURN);
             }));
 
-            printInstructions(instructions);
             return method;
         })
     };
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1581109377894)
+++ .idea/jarRepositories.xml	(date 1581109377894)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven2" />
+      <option name="name" value="maven2" />
+      <option name="url" value="https://files.minecraftforge.net/maven/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven" />
+      <option name="name" value="maven" />
+      <option name="url" value="https://minecraft.curseforge.com/api/maven" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven3" />
+      <option name="name" value="maven3" />
+      <option name="url" value="https://libraries.minecraft.net/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/chylex/hee/game/entity/projectile/EntityProjectileEnderPearl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.game.entity.projectile\r\nimport chylex.hee.HEE\r\nimport chylex.hee.game.block.info.BlockBuilder.Companion.INDESTRUCTIBLE_HARDNESS\r\nimport chylex.hee.game.item.infusion.Infusion.HARMLESS\r\nimport chylex.hee.game.item.infusion.Infusion.PHASING\r\nimport chylex.hee.game.item.infusion.Infusion.RIDING\r\nimport chylex.hee.game.item.infusion.Infusion.SLOW\r\nimport chylex.hee.game.item.infusion.InfusionList\r\nimport chylex.hee.game.item.infusion.InfusionTag\r\nimport chylex.hee.game.mechanics.damage.Damage\r\nimport chylex.hee.game.mechanics.damage.IDamageProcessor.Companion.ALL_PROTECTIONS_WITH_SHIELD\r\nimport chylex.hee.game.mechanics.damage.IDamageProcessor.Companion.PEACEFUL_EXCLUSION\r\nimport chylex.hee.game.world.util.Teleporter\r\nimport chylex.hee.init.ModEntities\r\nimport chylex.hee.system.migration.Facing.DOWN\r\nimport chylex.hee.system.migration.Facing.UP\r\nimport chylex.hee.system.migration.forge.EventPriority\r\nimport chylex.hee.system.migration.forge.SubscribeAllEvents\r\nimport chylex.hee.system.migration.forge.SubscribeEvent\r\nimport chylex.hee.system.migration.vanilla.EntityEnderPearl\r\nimport chylex.hee.system.migration.vanilla.EntityLivingBase\r\nimport chylex.hee.system.migration.vanilla.EntityPlayerMP\r\nimport chylex.hee.system.util.Pos\r\nimport chylex.hee.system.util.TagCompound\r\nimport chylex.hee.system.util.heeTag\r\nimport chylex.hee.system.util.posVec\r\nimport chylex.hee.system.util.subtractY\r\nimport chylex.hee.system.util.use\r\nimport net.minecraft.block.BlockState\r\nimport net.minecraft.entity.Entity\r\nimport net.minecraft.entity.EntityType\r\nimport net.minecraft.entity.LivingEntity\r\nimport net.minecraft.network.IPacket\r\nimport net.minecraft.network.PacketBuffer\r\nimport net.minecraft.util.DamageSource\r\nimport net.minecraft.util.math.BlockPos\r\nimport net.minecraft.util.math.BlockRayTraceResult\r\nimport net.minecraft.util.math.EntityRayTraceResult\r\nimport net.minecraft.util.math.RayTraceContext\r\nimport net.minecraft.util.math.RayTraceContext.FluidMode\r\nimport net.minecraft.util.math.RayTraceResult\r\nimport net.minecraft.util.math.RayTraceResult.Type\r\nimport net.minecraft.util.math.Vec3d\r\nimport net.minecraft.util.math.shapes.VoxelShape\r\nimport net.minecraft.util.math.shapes.VoxelShapes\r\nimport net.minecraft.world.IBlockReader\r\nimport net.minecraft.world.World\r\nimport net.minecraftforge.event.entity.EntityJoinWorldEvent\r\nimport net.minecraftforge.event.entity.living.LivingAttackEvent\r\nimport net.minecraftforge.fml.common.registry.IEntityAdditionalSpawnData\r\nimport net.minecraftforge.fml.network.NetworkHooks\r\n\r\nclass EntityProjectileEnderPearl(type: EntityType<EntityProjectileEnderPearl>, world: World) : EntityEnderPearl(type, world), IEntityAdditionalSpawnData{\r\n\tconstructor(thrower: EntityLivingBase, infusions: InfusionList) : this(ModEntities.ENDER_PEARL, thrower.world){\r\n\t\towner = thrower\r\n\t\townerId = thrower.uniqueID\r\n\t\t\r\n\t\tloadInfusions(infusions)\r\n\t\tsetPosition(thrower.posX, thrower.posY + thrower.eyeHeight - 0.1F, thrower.posZ)\r\n\t\tshoot(thrower, thrower.rotationPitch, thrower.rotationYaw, 0F, 1.5F, 1F)\r\n\t}\r\n\t\r\n\t@SubscribeAllEvents(modid = HEE.ID)\r\n\tcompanion object{\r\n\t\tprivate val DAMAGE_HIT_ENTITY = Damage(PEACEFUL_EXCLUSION, *ALL_PROTECTIONS_WITH_SHIELD)\r\n\t\t\r\n\t\tclass RayTraceIndestructible(startVec: Vec3d, endVec: Vec3d, entity: Entity) : RayTraceContext(startVec, endVec, BlockMode.COLLIDER, FluidMode.NONE, entity){\r\n\t\t\toverride fun getBlockShape(state: BlockState, world: IBlockReader, pos: BlockPos): VoxelShape{\r\n\t\t\t\treturn if (state.getBlockHardness(world, pos) == INDESTRUCTIBLE_HARDNESS)\r\n\t\t\t\t\tVoxelShapes.fullCube()\r\n\t\t\t\telse\r\n\t\t\t\t\tVoxelShapes.empty()\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate const val HAS_PHASED_TAG = \"HasPhased\"\r\n\t\t\r\n\t\t@SubscribeEvent\r\n\t\tfun onEntityJoinWorld(e: EntityJoinWorldEvent){\r\n\t\t\tval original = e.entity\r\n\t\t\t\r\n\t\t\tif (original is EntityEnderPearl && original !is EntityProjectileEnderPearl){\r\n\t\t\t\te.isCanceled = true\r\n\t\t\t\te.world.addEntity(EntityProjectileEnderPearl(original.thrower!!, InfusionList.EMPTY))\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t@SubscribeEvent(EventPriority.LOWEST)\r\n\t\tfun onLivingAttack(e: LivingAttackEvent){\r\n\t\t\tif (e.source === DamageSource.IN_WALL && !e.entity.world.isRemote){\r\n\t\t\t\tval riding = e.entityLiving.ridingEntity\r\n\t\t\t\t\r\n\t\t\t\tif (riding is EntityProjectileEnderPearl && riding.infusions.has(HARMLESS)){\r\n\t\t\t\t\te.isCanceled = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate var infusions = InfusionList.EMPTY\r\n\tprivate var hasPhasedIntoWall = false\r\n\tprivate var hasPhasingFinished = false\r\n\t\r\n\t// Initialization\r\n\t\r\n\tprivate fun loadInfusions(infusions: InfusionList){\r\n\t\tthis.infusions = infusions\r\n\t\tthis.noClip = infusions.has(PHASING)\r\n\t\t\r\n\t\tif (infusions.has(RIDING)){\r\n\t\t\tthrower?.startRiding(this, true)\r\n\t\t}\r\n\t}\r\n\t\r\n\toverride fun createSpawnPacket(): IPacket<*>{\r\n\t\treturn NetworkHooks.getEntitySpawningPacket(this)\r\n\t}\r\n\t\r\n\toverride fun writeSpawnData(buffer: PacketBuffer) = buffer.use {\r\n\t\twriteBoolean(infusions.has(HARMLESS))\r\n\t\twriteBoolean(infusions.has(SLOW))\r\n\t}\r\n\t\r\n\toverride fun readSpawnData(buffer: PacketBuffer) = buffer.use {\r\n\t\tvar list = InfusionList.EMPTY\r\n\t\t\r\n\t\tif (readBoolean()){\r\n\t\t\tlist = list.with(HARMLESS)\r\n\t\t}\r\n\t\t\r\n\t\tif (readBoolean()){\r\n\t\t\tlist = list.with(SLOW)\r\n\t\t}\r\n\t\t\r\n\t\tloadInfusions(list)\r\n\t}\r\n\t\r\n\toverride fun shoot(thrower: Entity, rotationPitch: Float, rotationYaw: Float, pitchOffset: Float, velocity: Float, inaccuracy: Float){\r\n\t\tsuper.shoot(thrower, rotationPitch, rotationYaw, pitchOffset, velocity, inaccuracy)\r\n\t\t\r\n\t\tif (infusions.has(SLOW)){\r\n\t\t\tmotion = motion.scale(0.1)\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Behavior\r\n\t\r\n\toverride fun tick(){\r\n\t\tval prevPos = posVec\r\n\t\tval prevMot = motion\r\n\t\tsuper.tick()\r\n\t\t\r\n\t\tif (infusions.has(SLOW)){\r\n\t\t\tmotion = prevMot.scale(0.999).subtractY(gravityVelocity * 0.01)\r\n\t\t}\r\n\t\telse if (!hasNoGravity()){\r\n\t\t\tmotion = prevMot.scale(0.99).subtractY(gravityVelocity.toDouble())\r\n\t\t}\r\n\t\t\r\n\t\tif (!world.isRemote && infusions.has(PHASING) && hasPhasedIntoWall){\r\n\t\t\tval airCheckBox = boundingBox.grow(0.15, 0.15, 0.15)\r\n\t\t\t\r\n\t\t\tif (!world.checkBlockCollision(airCheckBox) || world.rayTraceBlocks(RayTraceIndestructible(prevPos, prevPos.add(prevMot), this)).type == Type.BLOCK){\r\n\t\t\t\thasPhasingFinished = true\r\n\t\t\t\tposVec = prevPos\r\n\t\t\t\tonImpact(BlockRayTraceResult.createMiss(prevPos, DOWN, Pos(this)))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\toverride fun onImpact(result: RayTraceResult){\r\n\t\tif (infusions.has(PHASING) && !hasPhasingFinished){\r\n\t\t\thasPhasedIntoWall = true\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\tval thrower: EntityLivingBase? = thrower\r\n\t\tval hitEntity: Entity? = (result as? EntityRayTraceResult)?.entity\r\n\t\t\r\n\t\tif (hitEntity != null && hitEntity === thrower){\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\tif (hitEntity != null && !infusions.has(HARMLESS)){\r\n\t\t\tDAMAGE_HIT_ENTITY.dealToIndirectly(4F, hitEntity, this, thrower)\r\n\t\t}\r\n\t\t\r\n\t\tif (!world.isRemote){\r\n\t\t\tremove()\r\n\t\t\t\r\n\t\t\tval damage = if (infusions.has(HARMLESS)) 0F else 1F + world.difficulty.id\r\n\t\t\tval teleport = Teleporter(damageDealt = damage, causedInstability = 20u)\r\n\t\t\t\r\n\t\t\tif (thrower is EntityPlayerMP){\r\n\t\t\t\tif (thrower.connection.networkManager.isChannelOpen && thrower.world === world){\r\n\t\t\t\t\tteleport.toLocation(thrower, posVec)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (thrower != null){\r\n\t\t\t\tteleport.toLocation(thrower, posVec)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\toverride fun removePassenger(passenger: Entity){\r\n\t\tsuper.removePassenger(passenger)\r\n\t\t\r\n\t\tif (passenger === thrower && isAlive){\r\n\t\t\tonImpact(BlockRayTraceResult.createMiss(posVec, UP, Pos(this)))\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Serialization\r\n\t\r\n\toverride fun getThrower(): LivingEntity?{\r\n\t\tval uuid = ownerId\r\n\t\tval thrower = super.getThrower()\r\n\t\t\r\n\t\tif (thrower == null){\r\n\t\t\townerId = uuid // UPDATE getThrower is fucked, apparently fixed in 1.15\r\n\t\t}\r\n\t\t\r\n\t\treturn thrower\r\n\t}\r\n\t\r\n\toverride fun writeAdditional(nbt: TagCompound) = nbt.heeTag.use {\r\n\t\tsuper.writeAdditional(nbt)\r\n\t\t\r\n\t\tInfusionTag.setList(this, infusions)\r\n\t\tputBoolean(HAS_PHASED_TAG, hasPhasedIntoWall)\r\n\t}\r\n\t\r\n\toverride fun readAdditional(nbt: TagCompound) = nbt.heeTag.use {\r\n\t\tsuper.readAdditional(nbt)\r\n\t\t\r\n\t\tloadInfusions(InfusionTag.getList(this))\r\n\t\thasPhasedIntoWall = getBoolean(HAS_PHASED_TAG)\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/game/entity/projectile/EntityProjectileEnderPearl.kt	(revision 12f63e69e7cf514a5fbb3c60d3bf901456ec246c)
+++ src/main/java/chylex/hee/game/entity/projectile/EntityProjectileEnderPearl.kt	(date 1581114688051)
@@ -37,7 +37,6 @@
 import net.minecraft.util.math.BlockRayTraceResult
 import net.minecraft.util.math.EntityRayTraceResult
 import net.minecraft.util.math.RayTraceContext
-import net.minecraft.util.math.RayTraceContext.FluidMode
 import net.minecraft.util.math.RayTraceResult
 import net.minecraft.util.math.RayTraceResult.Type
 import net.minecraft.util.math.Vec3d
Index: src/main/java/chylex/hee/init/ModEntities.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package chylex.hee.init\r\nimport chylex.hee.HEE\r\nimport chylex.hee.game.entity.item.EntityFallingBlockHeavy\r\nimport chylex.hee.game.entity.item.EntityFallingObsidian\r\nimport chylex.hee.game.entity.item.EntityInfusedTNT\r\nimport chylex.hee.game.entity.item.EntityItemCauldronTrigger\r\nimport chylex.hee.game.entity.item.EntityItemFreshlyCooked\r\nimport chylex.hee.game.entity.item.EntityItemIgneousRock\r\nimport chylex.hee.game.entity.item.EntityItemNoBob\r\nimport chylex.hee.game.entity.item.EntityItemRevitalizationSubstance\r\nimport chylex.hee.game.entity.item.EntityTokenHolder\r\nimport chylex.hee.game.entity.living.EntityBossEnderEye\r\nimport chylex.hee.game.entity.living.EntityMobAngryEnderman\r\nimport chylex.hee.game.entity.living.EntityMobEnderman\r\nimport chylex.hee.game.entity.living.EntityMobEndermanMuppet\r\nimport chylex.hee.game.entity.living.EntityMobEndermite\r\nimport chylex.hee.game.entity.living.EntityMobEndermiteInstability\r\nimport chylex.hee.game.entity.living.EntityMobSilverfish\r\nimport chylex.hee.game.entity.living.EntityMobSpiderling\r\nimport chylex.hee.game.entity.living.EntityMobUndread\r\nimport chylex.hee.game.entity.living.EntityMobVampireBat\r\nimport chylex.hee.game.entity.living.EntityMobVillagerDying\r\nimport chylex.hee.game.entity.projectile.EntityProjectileEnderPearl\r\nimport chylex.hee.game.entity.projectile.EntityProjectileEyeOfEnder\r\nimport chylex.hee.game.entity.projectile.EntityProjectileSpatialDash\r\nimport chylex.hee.game.entity.technical.EntityTechnicalCausatumEvent\r\nimport chylex.hee.game.entity.technical.EntityTechnicalIgneousPlateLogic\r\nimport chylex.hee.game.entity.technical.EntityTechnicalPuzzle\r\nimport chylex.hee.game.entity.technical.EntityTechnicalTrigger\r\nimport chylex.hee.init.factory.EntityConstructors\r\nimport chylex.hee.system.migration.forge.EventPriority\r\nimport chylex.hee.system.migration.forge.SubscribeAllEvents\r\nimport chylex.hee.system.migration.forge.SubscribeEvent\r\nimport chylex.hee.system.migration.vanilla.EntityEnderman\r\nimport chylex.hee.system.migration.vanilla.EntityEndermite\r\nimport chylex.hee.system.migration.vanilla.EntitySilverfish\r\nimport chylex.hee.system.util.TagCompound\r\nimport chylex.hee.system.util.named\r\nimport net.minecraft.entity.Entity\r\nimport net.minecraft.entity.EntityClassification\r\nimport net.minecraft.entity.EntityClassification.MISC\r\nimport net.minecraft.entity.EntityClassification.MONSTER\r\nimport net.minecraft.entity.EntitySpawnPlacementRegistry\r\nimport net.minecraft.entity.EntitySpawnPlacementRegistry.PlacementType\r\nimport net.minecraft.entity.EntityType\r\nimport net.minecraft.entity.MobEntity\r\nimport net.minecraft.entity.monster.MonsterEntity\r\nimport net.minecraft.world.gen.Heightmap.Type\r\nimport net.minecraftforge.common.MinecraftForge\r\nimport net.minecraftforge.event.RegistryEvent\r\nimport net.minecraftforge.event.entity.EntityJoinWorldEvent\r\nimport net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus.MOD\r\n\r\n@SubscribeAllEvents(modid = HEE.ID, bus = MOD)\r\nobject ModEntities{\r\n\tval ITEM_CAULDRON_TRIGGER         = build<EntityItemCauldronTrigger>(MISC).size(0.25F, 0.25F).tracker(64, 3, true).name(\"item_cauldron_trigger\")\r\n\tval ITEM_FRESHLY_COOKED           = build<EntityItemFreshlyCooked>(MISC).size(0.25F, 0.25F).tracker(64, 3, true).name(\"item_freshly_cooked\")\r\n\tval ITEM_IGNEOUS_ROCK             = build<EntityItemIgneousRock>(MISC).size(0.25F, 0.25F).immuneToFire().tracker(64, 3, true).name(\"item_igneous_rock\")\r\n\tval ITEM_NO_BOB                   = build<EntityItemNoBob>(MISC).size(0.25F, 0.25F).tracker(64, 3, true).name(\"item_no_bob\")\r\n\tval ITEM_REVITALIZATION_SUBSTANCE = build<EntityItemRevitalizationSubstance>(MISC).size(0.25F, 0.25F).tracker(64, 3, true).name(\"item_revitalization_substance\")\r\n\t\r\n\tval FALLING_BLOCK_HEAVY = build<EntityFallingBlockHeavy>(MISC).size(0.98F, 0.98F).tracker(160, 20, true).name(\"falling_block_heavy\")\r\n\tval FALLING_OBSIDIAN    = build<EntityFallingObsidian>(MISC).size(0.98F, 0.98F).tracker(160, 20, true).name(\"falling_obsidian\")\r\n\tval INFUSED_TNT         = build<EntityInfusedTNT>(MISC).size(0.98F, 0.98F).tracker(160, 10, true).name(\"infused_tnt\")\r\n\tval TOKEN_HOLDER        = build<EntityTokenHolder>(MISC).size(0.55F, 0.675F).tracker(128, 60, false).name(\"token_holder\")\r\n\t\r\n\tval ENDER_EYE = build<EntityBossEnderEye>(MONSTER).size(1.1F, 1F).immuneToFire().tracker(160, 1, true).name(\"ender_eye\")\r\n\t\r\n\tval ENDERMAN              = build<EntityMobEnderman>(MONSTER).size(0.6F, 2.9F).tracker(80, 3, true).name(\"enderman\")\r\n\tval ANGRY_ENDERMAN        = build<EntityMobAngryEnderman>(MONSTER).size(0.6F, 2.9F).tracker(80, 3, true).name(\"angry_enderman\")\r\n\tval ENDERMAN_MUPPET       = build<EntityMobEndermanMuppet>(MISC).size(0.6F, 2.9F).tracker(96, 3, false).name(\"enderman_muppet\")\r\n\tval ENDERMITE             = build<EntityMobEndermite>(MONSTER).size(0.425F, 0.325F).tracker(80, 3, true).name(\"endermite\")\r\n\tval ENDERMITE_INSTABILITY = build<EntityMobEndermiteInstability>(MONSTER).size(0.425F, 0.325F).tracker(96, 3, true).name(\"endermite_instability\")\r\n\tval SILVERFISH            = build<EntityMobSilverfish>(MONSTER).size(0.575F, 0.35F).tracker(80, 3, true).name(\"silverfish\")\r\n\tval SPIDERLING            = build<EntityMobSpiderling>(MONSTER).size(0.675F, 0.45F).tracker(80, 2, true).name(\"spiderling\")\r\n\tval UNDREAD               = build<EntityMobUndread>(MONSTER).size(0.625F, 1.925F).tracker(80, 3, true).name(\"undread\")\r\n\tval VAMPIRE_BAT           = build<EntityMobVampireBat>(MONSTER).size(0.5F, 0.9F).tracker(80, 3, true).name(\"vampire_bat\")\r\n\tval VILLAGER_DYING        = build<EntityMobVillagerDying>(MISC).size(0.6F, 1.95F).tracker(80, 3, false).name(\"villager_dying\")\r\n\t\r\n\tval ENDER_PEARL  = build<EntityProjectileEnderPearl>(MISC).size(0.35F, 0.35F).tracker(64, 10, true).name(\"ender_pearl\")\r\n\tval EYE_OF_ENDER = build<EntityProjectileEyeOfEnder>(MISC).size(0.5F, 1F).tracker(64, 60, false).name(\"eye_of_ender\")\r\n\tval SPATIAL_DASH = build<EntityProjectileSpatialDash>(MISC).size(0.2F, 0.2F).tracker(64, 10, true).name(\"spatial_dash\")\r\n\t\r\n\tval CAUSATUM_EVENT      = build<EntityTechnicalCausatumEvent>(MISC).size(0F, 0F).immuneToFire().tracker(1, Int.MAX_VALUE, false).name(\"causatum_event\")\r\n\tval IGNEOUS_PLATE_LOGIC = build<EntityTechnicalIgneousPlateLogic>(MISC).size(0F, 0F).tracker(32, 10, false).name(\"igneous_plate_logic\")\r\n\tval TECHNICAL_PUZZLE    = build<EntityTechnicalPuzzle>(MISC).size(0F, 0F).immuneToFire().tracker(1, Int.MAX_VALUE, false).name(\"technical_puzzle\")\r\n\tval TECHNICAL_TRIGGER   = build<EntityTechnicalTrigger>(MISC).size(0F, 0F).immuneToFire().tracker(256, Int.MAX_VALUE, false).name(\"technical_trigger\")\r\n\t\r\n\t@SubscribeEvent\r\n\tfun onRegister(e: RegistryEvent.Register<EntityType<*>>){\r\n\t\twith(e.registry){\r\n\t\t\tregister(ITEM_CAULDRON_TRIGGER)\r\n\t\t\tregister(ITEM_FRESHLY_COOKED)\r\n\t\t\tregister(ITEM_IGNEOUS_ROCK)\r\n\t\t\tregister(ITEM_NO_BOB)\r\n\t\t\tregister(ITEM_REVITALIZATION_SUBSTANCE)\r\n\t\t\t\r\n\t\t\tregister(FALLING_BLOCK_HEAVY)\r\n\t\t\tregister(FALLING_OBSIDIAN)\r\n\t\t\tregister(INFUSED_TNT)\r\n\t\t\tregister(TOKEN_HOLDER)\r\n\t\t\t\r\n\t\t\tregister(ENDER_EYE)\r\n\t\t\t\r\n\t\t\tregister(ENDERMAN)\r\n\t\t\tregister(ANGRY_ENDERMAN)\r\n\t\t\tregister(ENDERMAN_MUPPET)\r\n\t\t\tregister(ENDERMITE)\r\n\t\t\tregister(ENDERMITE_INSTABILITY)\r\n\t\t\tregister(SILVERFISH)\r\n\t\t\tregister(SPIDERLING)\r\n\t\t\tregister(UNDREAD)\r\n\t\t\tregister(VAMPIRE_BAT)\r\n\t\t\tregister(VILLAGER_DYING)\r\n\t\t\t\r\n\t\t\tregister(ENDER_PEARL)\r\n\t\t\tregister(EYE_OF_ENDER)\r\n\t\t\tregister(SPATIAL_DASH)\r\n\t\t\t\r\n\t\t\tregister(CAUSATUM_EVENT)\r\n\t\t\tregister(IGNEOUS_PLATE_LOGIC)\r\n\t\t\tregister(TECHNICAL_PUZZLE)\r\n\t\t\tregister(TECHNICAL_TRIGGER)\r\n\t\t}\r\n\t\t\r\n\t\t// spawns\r\n\t\t\r\n\t\tval defaultSpawnPredicate = MonsterEntity::func_223325_c // RENAME this is the one that includes a light level check\r\n\t\t\r\n\t\tEntitySpawnPlacementRegistry.register(ENDERMAN, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, EntityMobEnderman.Companion::canSpawnAt)\r\n\t\tEntitySpawnPlacementRegistry.register(ANGRY_ENDERMAN, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(ENDERMITE, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(ENDERMITE_INSTABILITY, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(SILVERFISH, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(SPIDERLING, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(UNDREAD, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, defaultSpawnPredicate)\r\n\t\tEntitySpawnPlacementRegistry.register(VAMPIRE_BAT, PlacementType.ON_GROUND, Type.MOTION_BLOCKING_NO_LEAVES, MobEntity::canSpawnOn)\r\n\t\t\r\n\t\tMinecraftForge.EVENT_BUS.register(this)\r\n\t}\r\n\t\r\n\t// Vanilla modifications\r\n\t\r\n\t@SubscribeEvent(priority = EventPriority.HIGHEST)\r\n\tfun onEntityJoinWorld(e: EntityJoinWorldEvent){ // UPDATE any better way?\r\n\t\tval world = e.world\r\n\t\tval original = e.entity\r\n\t\t\r\n\t\tval overriden = when(original.javaClass){\r\n\t\t\tEntityEnderman::class.java -> EntityMobEnderman(world)\r\n\t\t\tEntityEndermite::class.java -> EntityMobEndermite(world)\r\n\t\t\tEntitySilverfish::class.java -> EntityMobSilverfish(world)\r\n\t\t\telse -> return\r\n\t\t}\r\n\t\t\r\n\t\t// no way to handle passengers on the initial spawn\r\n\t\toverriden.read(original.writeWithoutTypeId(TagCompound()))\r\n\t\t\r\n\t\te.isCanceled = true\r\n\t\tworld.addEntity(overriden)\r\n\t}\r\n\t\r\n\t// Utilities\r\n\t\r\n\tprivate inline fun <reified T : Entity> build(classification: EntityClassification): EntityType.Builder<T>{\r\n\t\treturn EntityType.Builder.create(EntityConstructors.get(T::class.java), classification)\r\n\t}\r\n\t\r\n\tprivate fun <T : Entity> EntityType.Builder<T>.tracker(trackingRange: Int, updateInterval: Int, receiveVelocityUpdates: Boolean): EntityType.Builder<T>{\r\n\t\treturn this.setTrackingRange(trackingRange).setUpdateInterval(updateInterval).setShouldReceiveVelocityUpdates(receiveVelocityUpdates)\r\n\t}\r\n\t\r\n\tprivate fun <T : Entity> EntityType.Builder<T>.name(name: String): EntityType<T>{\r\n\t\treturn this.build(\"hee.$name\") named name\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/chylex/hee/init/ModEntities.kt	(revision 12f63e69e7cf514a5fbb3c60d3bf901456ec246c)
+++ src/main/java/chylex/hee/init/ModEntities.kt	(date 1581697262463)
@@ -157,7 +157,10 @@
 		overriden.read(original.writeWithoutTypeId(TagCompound()))
 		
 		e.isCanceled = true
-		world.addEntity(overriden)
+		
+		if (world.chunkProvider.isChunkLoaded(original)){ // TODO deletes entity if added during chunk loading, i.e. old world, maybe try to fix?
+			world.addEntity(overriden)
+		}
 	}
 	
 	// Utilities
